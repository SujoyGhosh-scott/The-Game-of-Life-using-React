{"ast":null,"code":"var _jsxFileName = \"/home/sujoy/react-apps/game-of-life/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { ButtonToolbar, MenuItem, DropdownButton } from \"react-bootstrap\";\n\nclass Box extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.selectBox = () => {\n      this.props.selectBox(this.props.row, this.props.col);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: this.props.boxClass,\n      id: this.props.id,\n      onClick: this.selectBox,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\nclass Grid extends React.Component {\n  render() {\n    const width = this.props.cols * 14;\n    let rowsArr = [];\n    let boxClass = \"\"; //the below loop will set an id and class for each cell in the grid(2d array)\n    //id will be \"i_j\" and class will be either \"box on\"/\"box off\"\n\n    for (let i = 0; i < this.props.rows; i++) {\n      for (let j = 0; j < this.props.cols; j++) {\n        let boxId = i + \"_\" + j;\n        boxClass = this.props.gridFull[i][j] ? \"box on\" : \"box off\";\n        rowsArr.push( /*#__PURE__*/React.createElement(Box, {\n          boxClass: boxClass,\n          key: boxId,\n          boxId: boxId,\n          row: i,\n          col: j,\n          selectBox: this.props.selectBox,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 11\n          }\n        }));\n      }\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      style: {\n        width: width\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 7\n      }\n    }, rowsArr);\n  }\n\n}\n\nclass Buttons extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handelSelect = evt => {\n      this.props.gridSize(evt);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ButtonToolbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-danger m-2\",\n      onClick: this.props.playButton,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }\n    }, \"Play\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-danger m-2\",\n      onClick: this.props.pauseButton,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }\n    }, \"Pause\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-danger m-2\",\n      onClick: this.props.clear,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }\n    }, \"Clear\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-danger m-2\",\n      onClick: this.props.slow,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }\n    }, \"Slow\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-danger m-2\",\n      onClick: this.props.fast,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }\n    }, \"Fast\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-danger m-2\",\n      onClick: this.props.seed,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }\n    }, \"Seed\"), /*#__PURE__*/React.createElement(DropdownButton, {\n      title: \"Grid-size\",\n      id: \"size-menu\",\n      onSelect: this.handelSelect,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"menuItem\", {\n      eventKey: \"1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }\n    }, \"20x10\"), /*#__PURE__*/React.createElement(\"menuItem\", {\n      eventKey: \"2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }\n    }, \"50x30\"), /*#__PURE__*/React.createElement(\"menuItem\", {\n      eventKey: \"3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 13\n      }\n    }, \"70x50\"))));\n  }\n\n}\n\nclass Main extends React.Component {\n  constructor() {\n    super();\n\n    this.selectBox = (row, col) => {\n      //making a clone of the grid\n      let gridCopy = arrayClone(this.state.gridFull); //switching the state\n\n      gridCopy[row][col] = !gridCopy[row][col]; //coping the new grid\n\n      this.setState({\n        gridFull: gridCopy\n      });\n    };\n\n    this.seed = () => {\n      //setting the initial state\n      let gridCopy = arrayClone(this.state.gridFull); //going through each grid and randomly choosing the initial condition(weather true/false)\n\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j < this.cols; j++) {\n          //gnerating a random number between 0-4\n          //setting true if it's 1(20% chance of getting true)\n          if (Math.floor(Math.random() * 5) === 1) gridCopy[i][j] = true;\n        }\n      } //coping the new grid\n\n\n      this.setState({\n        gridFull: gridCopy\n      });\n    };\n\n    this.pauseButton = () => {\n      clearInterval(this.intervalId);\n    };\n\n    this.playButton = () => {\n      clearInterval(this.intervalId);\n      this.intervalId = setInterval(this.play, this.speed);\n    };\n\n    this.fast = () => {\n      this.speed = 1000;\n      this.playButton();\n    };\n\n    this.slow = () => {\n      this.speed = 100;\n      this.playButton();\n    };\n\n    this.play = () => {\n      //first we make two copies of the grid.\n      //to compare and decide, the next generation\n      let g = this.state.gridFull;\n      let g2 = arrayClone(this.state.gridFull); //rules\n      //#1 any live cell with fewer than two live neighbours dies,\n      // as if by underpopulation\n      //#2 any live cell with two or three live neighbours lives on to the next generation.\n      //#3 any live cell with more than three live neighbours dies,\n      //as if by underpopulation.\n      //#4 any dead cell with exactly three live neighbours become a live cell,\n      //as if by reproduction.\n\n      for (let i = 1; i < this.rows - 1; i++) {\n        for (let j = 1; j < this.cols - 1; j++) {\n          let count = 0; //counting the live cells around each cell\n\n          if (g[i - 1][j - 1]) count++;\n          if (g[i - 1][j]) count++;\n          if (g[i - 1][j + 1]) count++;\n          if (g[i][j - 1]) count++;\n          if (g[i][j + 1]) count++;\n          if (g[i + 1][j - 1]) count++;\n          if (g[i + 1][j]) count++;\n          if (g[i + 1][j + 1]) count++; //setting the new value\n          //#1 and #3\n\n          if (g[i][j] && (count < 2 || count > 3)) g2[i][j] = false; //#4\n\n          if (!g[i][j] && count === 3) g2[i][j] = true;\n        }\n      }\n\n      this.setState({\n        gridFull: g2,\n        generation: this.state.generation + 1\n      });\n    };\n\n    this.speed = 100;\n    this.rows = 30;\n    this.cols = 50;\n    this.state = {\n      generation: 0,\n      //this is gonna create a 2d array of 30x50 initialized with false\n      gridFull: Array(this.rows).fill().map(() => Array(this.cols).fill(false))\n    };\n  }\n\n  componentDidMount() {\n    this.seed();\n    this.playButton();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }\n    }, \"The Game of Life\"), /*#__PURE__*/React.createElement(Buttons, {\n      playButton: this.playButton,\n      pauseButton: this.pauseButton,\n      slow: this.slow,\n      fast: this.fast,\n      clear: this.clear,\n      seed: this.seed,\n      gridSize: this.gridSize,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Grid, {\n      gridFull: this.state.gridFull,\n      rows: this.rows,\n      cols: this.cols,\n      selectBox: this.selectBox,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }\n    }, \"Generation: \", this.state.generation));\n  }\n\n}\n\nfunction arrayClone(arr) {\n  return JSON.parse(JSON.stringify(arr));\n}\n\nReactDOM.render( /*#__PURE__*/React.createElement(React.StrictMode, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 245,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(Main, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 246,\n    columnNumber: 5\n  }\n})), document.getElementById(\"root\"));","map":{"version":3,"sources":["/home/sujoy/react-apps/game-of-life/src/index.js"],"names":["React","ReactDOM","ButtonToolbar","MenuItem","DropdownButton","Box","Component","selectBox","props","row","col","render","boxClass","id","Grid","width","cols","rowsArr","i","rows","j","boxId","gridFull","push","Buttons","handelSelect","evt","gridSize","playButton","pauseButton","clear","slow","fast","seed","Main","constructor","gridCopy","arrayClone","state","setState","Math","floor","random","clearInterval","intervalId","setInterval","play","speed","g","g2","count","generation","Array","fill","map","componentDidMount","arr","JSON","parse","stringify","document","getElementById"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { ButtonToolbar, MenuItem, DropdownButton } from \"react-bootstrap\";\n\nclass Box extends React.Component {\n  selectBox = () => {\n    this.props.selectBox(this.props.row, this.props.col);\n  };\n\n  render() {\n    return (\n      <div\n        className={this.props.boxClass}\n        id={this.props.id}\n        onClick={this.selectBox}\n      />\n    );\n  }\n}\n\nclass Grid extends React.Component {\n  render() {\n    const width = this.props.cols * 14;\n    let rowsArr = [];\n\n    let boxClass = \"\";\n    //the below loop will set an id and class for each cell in the grid(2d array)\n    //id will be \"i_j\" and class will be either \"box on\"/\"box off\"\n    for (let i = 0; i < this.props.rows; i++) {\n      for (let j = 0; j < this.props.cols; j++) {\n        let boxId = i + \"_\" + j;\n        boxClass = this.props.gridFull[i][j] ? \"box on\" : \"box off\";\n        rowsArr.push(\n          <Box\n            boxClass={boxClass}\n            key={boxId}\n            boxId={boxId}\n            row={i}\n            col={j}\n            selectBox={this.props.selectBox}\n          />\n        );\n      }\n    }\n\n    return (\n      <div className=\"grid\" style={{ width: width }}>\n        {rowsArr}\n      </div>\n    );\n  }\n}\n\nclass Buttons extends React.Component {\n  handelSelect = (evt) => {\n    this.props.gridSize(evt);\n  };\n\n  render() {\n    return (\n      <div className=\"center\">\n        <ButtonToolbar>\n          <button\n            className=\"btn btn-danger m-2\"\n            onClick={this.props.playButton}\n          >\n            Play\n          </button>\n          <button\n            className=\"btn btn-danger m-2\"\n            onClick={this.props.pauseButton}\n          >\n            Pause\n          </button>\n          <button className=\"btn btn-danger m-2\" onClick={this.props.clear}>\n            Clear\n          </button>\n          <button className=\"btn btn-danger m-2\" onClick={this.props.slow}>\n            Slow\n          </button>\n          <button className=\"btn btn-danger m-2\" onClick={this.props.fast}>\n            Fast\n          </button>\n          <button className=\"btn btn-danger m-2\" onClick={this.props.seed}>\n            Seed\n          </button>\n          <DropdownButton\n            title=\"Grid-size\"\n            id=\"size-menu\"\n            onSelect={this.handelSelect}\n          >\n            <menuItem eventKey=\"1\">20x10</menuItem>\n            <menuItem eventKey=\"2\">50x30</menuItem>\n            <menuItem eventKey=\"3\">70x50</menuItem>\n          </DropdownButton>\n        </ButtonToolbar>\n      </div>\n    );\n  }\n}\n\nclass Main extends React.Component {\n  constructor() {\n    super();\n    this.speed = 100;\n    this.rows = 30;\n    this.cols = 50;\n\n    this.state = {\n      generation: 0,\n      //this is gonna create a 2d array of 30x50 initialized with false\n      gridFull: Array(this.rows)\n        .fill()\n        .map(() => Array(this.cols).fill(false)),\n    };\n  }\n\n  selectBox = (row, col) => {\n    //making a clone of the grid\n    let gridCopy = arrayClone(this.state.gridFull);\n    //switching the state\n    gridCopy[row][col] = !gridCopy[row][col];\n    //coping the new grid\n    this.setState({\n      gridFull: gridCopy,\n    });\n  };\n\n  seed = () => {\n    //setting the initial state\n    let gridCopy = arrayClone(this.state.gridFull);\n    //going through each grid and randomly choosing the initial condition(weather true/false)\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.cols; j++) {\n        //gnerating a random number between 0-4\n        //setting true if it's 1(20% chance of getting true)\n        if (Math.floor(Math.random() * 5) === 1) gridCopy[i][j] = true;\n      }\n    }\n    //coping the new grid\n    this.setState({\n      gridFull: gridCopy,\n    });\n  };\n\n  pauseButton = () => {\n    clearInterval(this.intervalId);\n  };\n\n  playButton = () => {\n    clearInterval(this.intervalId);\n    this.intervalId = setInterval(this.play, this.speed);\n  };\n\n  fast = () => {\n    this.speed = 1000;\n    this.playButton();\n  };\n\n  slow = () => {\n    this.speed = 100;\n    this.playButton();\n  };\n\n  clear\n  \n  play = () => {\n    //first we make two copies of the grid.\n    //to compare and decide, the next generation\n    let g = this.state.gridFull;\n    let g2 = arrayClone(this.state.gridFull);\n\n    //rules\n    //#1 any live cell with fewer than two live neighbours dies,\n    // as if by underpopulation\n    //#2 any live cell with two or three live neighbours lives on to the next generation.\n    //#3 any live cell with more than three live neighbours dies,\n    //as if by underpopulation.\n    //#4 any dead cell with exactly three live neighbours become a live cell,\n    //as if by reproduction.\n\n    for (let i = 1; i < this.rows - 1; i++) {\n      for (let j = 1; j < this.cols - 1; j++) {\n        let count = 0;\n        //counting the live cells around each cell\n        if (g[i - 1][j - 1]) count++;\n        if (g[i - 1][j]) count++;\n        if (g[i - 1][j + 1]) count++;\n        if (g[i][j - 1]) count++;\n        if (g[i][j + 1]) count++;\n        if (g[i + 1][j - 1]) count++;\n        if (g[i + 1][j]) count++;\n        if (g[i + 1][j + 1]) count++;\n\n        //setting the new value\n        //#1 and #3\n        if (g[i][j] && (count < 2 || count > 3)) g2[i][j] = false;\n        //#4\n        if (!g[i][j] && count === 3) g2[i][j] = true;\n      }\n    }\n\n    this.setState({\n      gridFull: g2,\n      generation: this.state.generation + 1,\n    });\n  };\n\n  componentDidMount() {\n    this.seed();\n    this.playButton();\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>The Game of Life</h1>\n        <Buttons\n          playButton={this.playButton}\n          pauseButton={this.pauseButton}\n          slow={this.slow}\n          fast={this.fast}\n          clear={this.clear}\n          seed={this.seed}\n          gridSize={this.gridSize}\n        />\n        <Grid\n          gridFull={this.state.gridFull}\n          rows={this.rows}\n          cols={this.cols}\n          selectBox={this.selectBox}\n        />\n        <h2>Generation: {this.state.generation}</h2>\n      </div>\n    );\n  }\n}\n\nfunction arrayClone(arr) {\n  return JSON.parse(JSON.stringify(arr));\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"]},"metadata":{},"sourceType":"module"}
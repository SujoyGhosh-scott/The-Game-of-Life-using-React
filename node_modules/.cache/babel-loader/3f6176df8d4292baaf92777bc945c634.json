{"ast":null,"code":"var _jsxFileName = \"/home/sujoy/react-apps/game-of-life/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nclass Box extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.selectBox = () => {\n      this.props.selectBox(this.props.row, this.props.col);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: this.props.boxClass,\n      id: this.props.id,\n      onClick: this.selectBox,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\nclass Grid extends React.Component {\n  render() {\n    const width = this.props.cols * 16;\n    let rowsArr = [];\n    let boxClass = \"\"; //the below loop will set an id and class for each cell in the grid(2d array)\n    //id will be \"i_j\" and class will be either \"box on\"/\"box off\"\n\n    for (let i = 0; i < this.props.rows; i++) {\n      for (let j = 0; j < this.props.cols; j++) {\n        let boxId = i + \"_\" + j;\n        boxClass = this.props.gridFull[i][j] ? \"box on\" : \"box off\";\n        rowsArr.push( /*#__PURE__*/React.createElement(Box, {\n          boxClass: boxClass,\n          key: boxId,\n          boxId: boxId,\n          row: i,\n          col: j,\n          selectBox: this.props.selectBox,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 11\n          }\n        }));\n      }\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      style: {\n        width: width\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 7\n      }\n    }, rowsArr);\n  }\n\n}\n\nclass Main extends React.Component {\n  constructor() {\n    super();\n\n    this.selectBox = (row, col) => {\n      //making a clone of the grid\n      let gridCopy = arrayClone(this.state.gridFull); //switching the state\n\n      gridCopy[row][col] = !gridCopy[row][col]; //coping the new grid\n\n      this.setState({\n        gridFull: gridCopy\n      });\n    };\n\n    this.seed = () => {\n      //setting the initial state\n      let gridCopy = arrayClone(this.state.gridFull); //going through each grid and randomly choosing the initial condition(weather true/false)\n\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j < this.cols; j++) {\n          //gnerating a random number between 0-4\n          //setting true if it's 1(20% chance of getting true)\n          if (Math.floor(Math.random() * 5) === 1) gridCopy[i][j] = true;\n        }\n      } //coping the new grid\n\n\n      this.setState({\n        gridFull: gridCopy\n      });\n    };\n\n    this.playButton = () => {\n      clearInterval(this.intervalId);\n      this.intervalId = setInterval;\n    };\n\n    this.speed = 100;\n    this.rows = 30;\n    this.cols = 50;\n    this.state = {\n      generation: 0,\n      //this is gonna create a 2d array of 30x50 initialized with false\n      gridFull: Array(this.rows).fill().map(() => Array(this.cols).fill(false))\n    };\n  }\n\n  componentDidMount() {\n    this.seed();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }\n    }, \"The Game of Life\"), /*#__PURE__*/React.createElement(Grid, {\n      gridFull: this.state.gridFull,\n      rows: this.rows,\n      cols: this.cols,\n      selectBox: this.selectBox,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }\n    }, \"Generation: \", this.state.generation));\n  }\n\n}\n\nfunction arrayClone(arr) {\n  return JSON.parse(JSON.stringify(arr));\n}\n\nReactDOM.render( /*#__PURE__*/React.createElement(React.StrictMode, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(Main, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }\n})), document.getElementById(\"root\"));","map":{"version":3,"sources":["/home/sujoy/react-apps/game-of-life/src/index.js"],"names":["React","ReactDOM","Box","Component","selectBox","props","row","col","render","boxClass","id","Grid","width","cols","rowsArr","i","rows","j","boxId","gridFull","push","Main","constructor","gridCopy","arrayClone","state","setState","seed","Math","floor","random","playButton","clearInterval","intervalId","setInterval","speed","generation","Array","fill","map","componentDidMount","arr","JSON","parse","stringify","document","getElementById"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nclass Box extends React.Component {\n  selectBox = () => {\n    this.props.selectBox(this.props.row, this.props.col);\n  };\n\n  render() {\n    return (\n      <div\n        className={this.props.boxClass}\n        id={this.props.id}\n        onClick={this.selectBox}\n      />\n    );\n  }\n}\n\nclass Grid extends React.Component {\n  render() {\n    const width = this.props.cols * 16;\n    let rowsArr = [];\n\n    let boxClass = \"\";\n    //the below loop will set an id and class for each cell in the grid(2d array)\n    //id will be \"i_j\" and class will be either \"box on\"/\"box off\"\n    for (let i = 0; i < this.props.rows; i++) {\n      for (let j = 0; j < this.props.cols; j++) {\n        let boxId = i + \"_\" + j;\n        boxClass = this.props.gridFull[i][j] ? \"box on\" : \"box off\";\n        rowsArr.push(\n          <Box\n            boxClass={boxClass}\n            key={boxId}\n            boxId={boxId}\n            row={i}\n            col={j}\n            selectBox={this.props.selectBox}\n          />\n        );\n      }\n    }\n\n    return (\n      <div className=\"grid\" style={{ width: width }}>\n        {rowsArr}\n      </div>\n    );\n  }\n}\n\nclass Main extends React.Component {\n  constructor() {\n    super();\n    this.speed = 100;\n    this.rows = 30;\n    this.cols = 50;\n\n    this.state = {\n      generation: 0,\n      //this is gonna create a 2d array of 30x50 initialized with false\n      gridFull: Array(this.rows)\n        .fill()\n        .map(() => Array(this.cols).fill(false)),\n    };\n  }\n\n  selectBox = (row, col) => {\n    //making a clone of the grid\n    let gridCopy = arrayClone(this.state.gridFull);\n    //switching the state\n    gridCopy[row][col] = !gridCopy[row][col];\n    //coping the new grid\n    this.setState({\n      gridFull: gridCopy,\n    });\n  };\n\n  seed = () => {\n    //setting the initial state\n    let gridCopy = arrayClone(this.state.gridFull);\n    //going through each grid and randomly choosing the initial condition(weather true/false)\n    for(let i=0;i<this.rows;i++) {\n      for(let j=0;j<this.cols;j++) {\n        //gnerating a random number between 0-4\n        //setting true if it's 1(20% chance of getting true)\n        if(Math.floor(Math.random() * 5) === 1) gridCopy[i][j] = true;\n      }\n    }\n    //coping the new grid\n    this.setState({\n      gridFull: gridCopy,\n    });\n  }\n\n  playButton = () => {\n    clearInterval(this.intervalId);\n    this.intervalId = setInterval\n  }\n\n  componentDidMount() {\n    this.seed();\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>The Game of Life</h1>\n        <Grid\n          gridFull={this.state.gridFull}\n          rows={this.rows}\n          cols={this.cols}\n          selectBox={this.selectBox}\n        />\n        <h2>Generation: {this.state.generation}</h2>\n      </div>\n    );\n  }\n}\n\nfunction arrayClone(arr) {\n  return JSON.parse(JSON.stringify(arr));\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"]},"metadata":{},"sourceType":"module"}